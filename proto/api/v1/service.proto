syntax = "proto3";

package vdt.ai.api.v1;

option go_package = "github.com/vdt-ai/monorepo/proto/api/v1";

import "common/v1/types.proto";
import "google/protobuf/empty.proto";

// API service definitions for the web application

service UserService {
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
}

service DataService {
  rpc UploadData(UploadDataRequest) returns (UploadDataResponse);
  rpc GetData(GetDataRequest) returns (GetDataResponse);
  rpc ListData(ListDataRequest) returns (ListDataResponse);
  rpc ProcessData(ProcessDataRequest) returns (ProcessDataResponse);
}

service ModelService {
  rpc CreateModel(CreateModelRequest) returns (CreateModelResponse);
  rpc GetModel(GetModelRequest) returns (GetModelResponse);
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse);
  rpc TrainModel(TrainModelRequest) returns (TrainModelResponse);
  rpc PredictModel(PredictModelRequest) returns (PredictModelResponse);
}

// User Service Messages
message CreateUserRequest {
  string email = 1;
  string name = 2;
  vdt.ai.common.v1.UserRole role = 3;
}

message CreateUserResponse {
  vdt.ai.common.v1.User user = 1;
}

message GetUserRequest {
  string id = 1;
}

message GetUserResponse {
  vdt.ai.common.v1.User user = 1;
}

message UpdateUserRequest {
  string id = 1;
  string email = 2;
  string name = 3;
  vdt.ai.common.v1.UserRole role = 4;
}

message UpdateUserResponse {
  vdt.ai.common.v1.User user = 1;
}

message DeleteUserRequest {
  string id = 1;
}

message ListUsersRequest {
  int32 page = 1;
  int32 page_size = 2;
  string filter = 3;
}

message ListUsersResponse {
  repeated vdt.ai.common.v1.User users = 1;
  int32 total_count = 2;
}

// Data Service Messages
message UploadDataRequest {
  string user_id = 1;
  vdt.ai.common.v1.DataType type = 2;
  bytes content = 3;
  map<string, string> metadata = 4;
}

message UploadDataResponse {
  vdt.ai.common.v1.DataRecord record = 1;
}

message GetDataRequest {
  string id = 1;
}

message GetDataResponse {
  vdt.ai.common.v1.DataRecord record = 1;
}

message ListDataRequest {
  string user_id = 1;
  vdt.ai.common.v1.DataType type = 2;
  vdt.ai.common.v1.ProcessingStatus status = 3;
  int32 page = 4;
  int32 page_size = 5;
}

message ListDataResponse {
  repeated vdt.ai.common.v1.DataRecord records = 1;
  int32 total_count = 2;
}

message ProcessDataRequest {
  string data_id = 1;
  string model_id = 2;
  map<string, string> parameters = 3;
}

message ProcessDataResponse {
  string job_id = 1;
  vdt.ai.common.v1.ProcessingStatus status = 2;
}

// Model Service Messages
message CreateModelRequest {
  string name = 1;
  vdt.ai.common.v1.ModelType type = 2;
  map<string, string> config = 3;
}

message CreateModelResponse {
  vdt.ai.common.v1.AIModel model = 1;
}

message GetModelRequest {
  string id = 1;
}

message GetModelResponse {
  vdt.ai.common.v1.AIModel model = 1;
}

message ListModelsRequest {
  vdt.ai.common.v1.ModelType type = 1;
  vdt.ai.common.v1.ModelStatus status = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message ListModelsResponse {
  repeated vdt.ai.common.v1.AIModel models = 1;
  int32 total_count = 2;
}

message TrainModelRequest {
  string model_id = 1;
  repeated string data_ids = 2;
  map<string, string> parameters = 3;
}

message TrainModelResponse {
  string job_id = 1;
  vdt.ai.common.v1.ModelStatus status = 2;
}

message PredictModelRequest {
  string model_id = 1;
  bytes input_data = 2;
  map<string, string> parameters = 3;
}

message PredictModelResponse {
  bytes prediction = 1;
  float confidence = 2;
  map<string, string> metadata = 3;
}
