# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc
from api.v1 import service_pb2 as api_dot_v1_dot_service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in api/v1/service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UserServiceStub(object):
    """API service definitions for the web application

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/vdt.ai.api.v1.UserService/CreateUser',
                request_serializer=api_dot_v1_dot_service__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.CreateUserResponse.FromString,
                _registered_method=True)
        self.GetUser = channel.unary_unary(
                '/vdt.ai.api.v1.UserService/GetUser',
                request_serializer=api_dot_v1_dot_service__pb2.GetUserRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.GetUserResponse.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/vdt.ai.api.v1.UserService/UpdateUser',
                request_serializer=api_dot_v1_dot_service__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.UpdateUserResponse.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/vdt.ai.api.v1.UserService/DeleteUser',
                request_serializer=api_dot_v1_dot_service__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ListUsers = channel.unary_unary(
                '/vdt.ai.api.v1.UserService/ListUsers',
                request_serializer=api_dot_v1_dot_service__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.ListUsersResponse.FromString,
                _registered_method=True)


class UserServiceServicer(object):
    """API service definitions for the web application

    """

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=api_dot_v1_dot_service__pb2.CreateUserRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.CreateUserResponse.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=api_dot_v1_dot_service__pb2.GetUserRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.GetUserResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=api_dot_v1_dot_service__pb2.UpdateUserRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.UpdateUserResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=api_dot_v1_dot_service__pb2.DeleteUserRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=api_dot_v1_dot_service__pb2.ListUsersRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.ListUsersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vdt.ai.api.v1.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vdt.ai.api.v1.UserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """API service definitions for the web application

    """

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.UserService/CreateUser',
            api_dot_v1_dot_service__pb2.CreateUserRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.CreateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.UserService/GetUser',
            api_dot_v1_dot_service__pb2.GetUserRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.GetUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.UserService/UpdateUser',
            api_dot_v1_dot_service__pb2.UpdateUserRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.UpdateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.UserService/DeleteUser',
            api_dot_v1_dot_service__pb2.DeleteUserRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.UserService/ListUsers',
            api_dot_v1_dot_service__pb2.ListUsersRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.ListUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DataServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadData = channel.unary_unary(
                '/vdt.ai.api.v1.DataService/UploadData',
                request_serializer=api_dot_v1_dot_service__pb2.UploadDataRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.UploadDataResponse.FromString,
                _registered_method=True)
        self.GetData = channel.unary_unary(
                '/vdt.ai.api.v1.DataService/GetData',
                request_serializer=api_dot_v1_dot_service__pb2.GetDataRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.GetDataResponse.FromString,
                _registered_method=True)
        self.ListData = channel.unary_unary(
                '/vdt.ai.api.v1.DataService/ListData',
                request_serializer=api_dot_v1_dot_service__pb2.ListDataRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.ListDataResponse.FromString,
                _registered_method=True)
        self.ProcessData = channel.unary_unary(
                '/vdt.ai.api.v1.DataService/ProcessData',
                request_serializer=api_dot_v1_dot_service__pb2.ProcessDataRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.ProcessDataResponse.FromString,
                _registered_method=True)


class DataServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadData': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadData,
                    request_deserializer=api_dot_v1_dot_service__pb2.UploadDataRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.UploadDataResponse.SerializeToString,
            ),
            'GetData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetData,
                    request_deserializer=api_dot_v1_dot_service__pb2.GetDataRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.GetDataResponse.SerializeToString,
            ),
            'ListData': grpc.unary_unary_rpc_method_handler(
                    servicer.ListData,
                    request_deserializer=api_dot_v1_dot_service__pb2.ListDataRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.ListDataResponse.SerializeToString,
            ),
            'ProcessData': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessData,
                    request_deserializer=api_dot_v1_dot_service__pb2.ProcessDataRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.ProcessDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vdt.ai.api.v1.DataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vdt.ai.api.v1.DataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DataService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.DataService/UploadData',
            api_dot_v1_dot_service__pb2.UploadDataRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.UploadDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.DataService/GetData',
            api_dot_v1_dot_service__pb2.GetDataRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.GetDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.DataService/ListData',
            api_dot_v1_dot_service__pb2.ListDataRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.ListDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ProcessData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.DataService/ProcessData',
            api_dot_v1_dot_service__pb2.ProcessDataRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.ProcessDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ModelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateModel = channel.unary_unary(
                '/vdt.ai.api.v1.ModelService/CreateModel',
                request_serializer=api_dot_v1_dot_service__pb2.CreateModelRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.CreateModelResponse.FromString,
                _registered_method=True)
        self.GetModel = channel.unary_unary(
                '/vdt.ai.api.v1.ModelService/GetModel',
                request_serializer=api_dot_v1_dot_service__pb2.GetModelRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.GetModelResponse.FromString,
                _registered_method=True)
        self.ListModels = channel.unary_unary(
                '/vdt.ai.api.v1.ModelService/ListModels',
                request_serializer=api_dot_v1_dot_service__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.ListModelsResponse.FromString,
                _registered_method=True)
        self.TrainModel = channel.unary_unary(
                '/vdt.ai.api.v1.ModelService/TrainModel',
                request_serializer=api_dot_v1_dot_service__pb2.TrainModelRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.TrainModelResponse.FromString,
                _registered_method=True)
        self.PredictModel = channel.unary_unary(
                '/vdt.ai.api.v1.ModelService/PredictModel',
                request_serializer=api_dot_v1_dot_service__pb2.PredictModelRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_service__pb2.PredictModelResponse.FromString,
                _registered_method=True)


class ModelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrainModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PredictModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateModel': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateModel,
                    request_deserializer=api_dot_v1_dot_service__pb2.CreateModelRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.CreateModelResponse.SerializeToString,
            ),
            'GetModel': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModel,
                    request_deserializer=api_dot_v1_dot_service__pb2.GetModelRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.GetModelResponse.SerializeToString,
            ),
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=api_dot_v1_dot_service__pb2.ListModelsRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.ListModelsResponse.SerializeToString,
            ),
            'TrainModel': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainModel,
                    request_deserializer=api_dot_v1_dot_service__pb2.TrainModelRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.TrainModelResponse.SerializeToString,
            ),
            'PredictModel': grpc.unary_unary_rpc_method_handler(
                    servicer.PredictModel,
                    request_deserializer=api_dot_v1_dot_service__pb2.PredictModelRequest.FromString,
                    response_serializer=api_dot_v1_dot_service__pb2.PredictModelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vdt.ai.api.v1.ModelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vdt.ai.api.v1.ModelService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ModelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.ModelService/CreateModel',
            api_dot_v1_dot_service__pb2.CreateModelRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.CreateModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.ModelService/GetModel',
            api_dot_v1_dot_service__pb2.GetModelRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.GetModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.ModelService/ListModels',
            api_dot_v1_dot_service__pb2.ListModelsRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.ListModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrainModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.ModelService/TrainModel',
            api_dot_v1_dot_service__pb2.TrainModelRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.TrainModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PredictModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vdt.ai.api.v1.ModelService/PredictModel',
            api_dot_v1_dot_service__pb2.PredictModelRequest.SerializeToString,
            api_dot_v1_dot_service__pb2.PredictModelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
