version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: vdt-ai-postgres
    environment:
      POSTGRES_DB: vdt_ai
      POSTGRES_USER: vdt_ai_user
      POSTGRES_PASSWORD: vdt_ai_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docs/db_schema.sql:/docker-entrypoint-initdb.d/db_schema.sql:ro
      - ./docker/postgres/01_schema.sql:/docker-entrypoint-initdb.d/01_schema.sql:ro
    networks:
      - vdt-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vdt_ai_user -d vdt_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: vdt-ai-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - vdt-ai-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: vdt-ai-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - vdt-ai-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: vdt-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vdt-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: ./docker/web/Dockerfile
    container_name: vdt-ai-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://vdt_ai_user:vdt_ai_password@postgres:5432/vdt_ai
      - KAFKA_BROKERS=kafka:29092
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/dashboard:/app/apps/dashboard
    networks:
      - vdt-ai-network
    command: npm run dev

  consumer:
    build:
      context: .
      dockerfile: ./docker/kafka-consumer/Dockerfile
    container_name: vdt-ai-consumer
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgres://vdt_ai_user:vdt_ai_password@postgres:5432/vdt_ai?sslmode=disable
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_CONSUMER_GROUP=vdt-ai-consumer
      - KAFKA_TOPICS=user-events,data-events,model-events,processing-job-events
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./apps/kafka-consumer:/app
    networks:
      - vdt-ai-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: vdt-ai-kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - vdt-ai-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: vdt-ai-pgadmin
    ports:
      - "8082:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: phamdat17092004@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - vdt-ai-network

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  vdt-ai-network:
    driver: bridge
